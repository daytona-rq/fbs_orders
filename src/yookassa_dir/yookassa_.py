import json
from fastapi import APIRouter, Request, HTTPException, Header, Response
from fastapi.responses import JSONResponse
from .schemas import YooKassaWebhook
import hmac
import hashlib
import os
import logging

from yookassa.domain.notification import WebhookNotification
from src.telegram.bot import bot
from src.database.database import async_session_maker
from src.database.config import settings

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/yookassa", tags=["Webhooks"])

YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

async def send_telegram_notification(chat_id: int, message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API"""
    bot.send_message(chat_id, message)

async def process_payment(payment_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        chat_id = payment_data.metadata["chat_id"]
        amount = payment_data.amount.value
        
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î (–ø—Ä–∏–º–µ—Ä)
        async with async_session_maker() as db:
            # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏/–±–∞–ª–∞–Ω—Å–∞
            pass
            
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        message = (
            f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞ {amount} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"ID –ø–ª–∞—Ç–µ–∂–∞: <code>{payment_data.id}</code>"
        )
        await send_telegram_notification(chat_id, message)
        
    except KeyError:
        print("–û—à–∏–±–∫–∞: chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ metadata")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")

@router.post("/webhook")
async def webhook_handler(request: Request):
    event_json = await request.json()
    payment_status = event_json['event']
    chat_id = event_json['object']['metadata']['chat_id']
    if payment_status == 'payment.succeeded':
        await bot.send_message(chat_id, text='–ê—É–µ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ üíã')
    return JSONResponse(content={"status": "success"}, status_code=200)

"""
async def handle_webhook(
    payload: YooKassaWebhook,
    request: Request,
    ip_addr: str = Header(None),
):
    raw_body = await request.body()
    raw_json = await request.json()
    logger.info(f"Raw webhook data: {raw_json}")
    return {"status": "ok"}
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    if YOOKASSA_SECRET_KEY:
        signature = request.headers.get("Content-SHA256", "")
        body_bytes = await request.body()
        
        computed_signature = hmac.new(
            key=YOOKASSA_SECRET_KEY.encode(),
            msg=body_bytes,
            digestmod=hashlib.sha256
        ).hexdigest()

        if signature != computed_signature:
            raise HTTPException(403, "Invalid webhook signature")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
    if payload.type == "payment.succeeded":
        await process_payment(payload.object)
    elif payload.type == "payment.canceled":
        chat_id = payload.object.metadata.get("chat_id")
        if chat_id:
            message = "‚ùå –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω"
            await send_telegram_notification(chat_id, message)

    return {"status": "ok"}
"""